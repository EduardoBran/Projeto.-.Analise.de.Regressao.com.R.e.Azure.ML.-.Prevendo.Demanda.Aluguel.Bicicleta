bikes$dteday <- set.asPOSIXct(bikes)
}else{
bikes <- bikes
}
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "cnt")
# Vetor com os métodos de correlação
metodos <- c("pearson", "spearman")
# Aplicando os métodos de correlação com a função cor()
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
# Função para criar o plot
plot_corr <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
# Exibindo o plot
Map(plot_corr, cors, metodos)
library(lattice)   # plot correlação
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "cnt")
# Vetor com os métodos de correlação
metodos <- c("pearson", "spearman")
# Aplicando os métodos de correlação com a função cor()
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
plot_corr <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
# Exibindo o plot
Map(plot_corr, cors, metodos)
# Criando/calculando uma matriz de correlação
cor_matrix <- cor(bikes)
# Criando/calculando uma matriz de correlação
cor_matrix <- cor(bikes[, cols])
cor_matrix
# Corrplot (para outras cores usar colors())
corrplot(cor_matrix,
method = "color",
type = "upper",
addCoef.col = 'springgreen2',
tl.col = "black",
tl.srt = 45)
library(corrplot)
# Corrplot (para outras cores usar colors())
corrplot(cor_matrix,
method = "color",
type = "upper",
addCoef.col = 'springgreen2',
tl.col = "black",
tl.srt = 45)
cors
cor_matrix
# Definindo as colunas para a análise de correlação
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "cnt")
# Vetor com os métodos de correlação
metodos <- c("pearson", "spearman")
# Aplicando os métodos de correlação com a função cor()
cors <- lapply(metodos, function(method)
(cor(bikes[, cols], method = method)))
cors
# Criando/calculando uma matriz de correlação
cor_matrix <- cor(bikes[, cols])
cor_matrix
plot_corr <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
# Exibindo o plot
Map(plot_corr, cors, metodos)
# Defina o layout da área gráfica
par(mfrow = c(1, 2))
Map(plot_corr, cors, metodos)
# Gráfico 2: Utilizando a função corrplot
corrplot(cor_matrix,
method = "color",
type = "upper",
addCoef.col = 'springgreen2',
tl.col = "black",
tl.srt = 45)
# Restaure o layout padrão da área gráfica
par(mfrow = c(1, 1))
# Defina o layout da área gráfica
par(mfrow = c(1, 2))
# Gráfico 1: Utilizando a função Map
Map(plot_corr, cors, metodos)
# Gráfico 2: Utilizando a função corrplot
corrplot(cor_matrix,
method = "color",
type = "upper",
addCoef.col = 'springgreen2',
tl.col = "black",
tl.srt = 45)
# Crie um layout de uma linha e duas colunas
layout(matrix(c(1, 2), 1, 2))
Map(plot_corr, cors, metodos)
# Gráfico 2: Utilizando a função corrplot
corrplot(cor_matrix,
method = "color",
type = "upper",
addCoef.col = 'springgreen2',
tl.col = "black",
tl.srt = 45)
# Restaure o layout padrão
layout(1)
# Gráfico 2: Utilizando a função corrplot
corrplot(cor_matrix,
method = "color",
type = "upper",
addCoef.col = 'springgreen2',
tl.col = "black",
tl.srt = 45)
# Crie um layout de uma linha e duas colunas
layout(matrix(c(1, 2), 1, 2))
# Gráfico 1: Utilizando a função Map
Map(plot_corr, cors, metodos)
# Gráfico 2: Utilizando a função corrplot
corrplot(cor_matrix,
method = "color",
type = "upper",
addCoef.col = 'springgreen2',
tl.col = "black",
tl.srt = 45)
png("grafico1.png", width = 800, height = 400)
Map(plot_corr, cors, metodos)
dev.off()
png("grafico2.png", width = 800, height = 400)
corrplot(cor_matrix,
method = "color",
type = "upper",
addCoef.col = 'springgreen2',
tl.col = "black",
tl.srt = 45)
dev.off()
# Função para criar o plot
plot_corr <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
# Exibindo o plot
Map(plot_corr, cors, metodos)
plot_corr <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
# Exibindo o plot
Map(plot_corr, cors, metodos)
plot_corr <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de Correlação usando Método", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
# Exibindo o plot
Map(plot_corr, cors, metodos)
## Carregando pacotes
library(ggplot2)
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
Azure <- FALSE
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
bikes <- bikes
}
# Criando um vetor com algumas horas do dia para verificar qual horário tem a maior demanda por aluguel de bikes
# (pode ser feito com outros valores)
times <- c(7, 9, 12, 15, 18, 20, 22)
tms.plot <- function(times){
ggplot(bikes[bikes$workTime == times, ], aes(x = dteday, y = cnt)) +
geom_line() +
ylab("Numero de Bikes") +
labs(title = paste("Demanda de Bikes as ", as.character(times), ":00", sep = "")) +
theme(text = element_text(size = 20))
}
lapply(times, tms.plot)
## Carregando pacotes
library(ggplot2)
# Variável que controla a execução do script
Azure <- FALSE
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
bikes <- bikes
}
# Criando um vetor com algumas horas do dia para verificar qual horário tem a maior demanda por aluguel de bikes
# (pode ser feito com outros valores)
times <- c(7, 9, 12, 15, 18, 20, 22)
# Time Series Plot (plot de Séries Temporais)
tms.plot <- function(times){
ggplot(bikes[bikes$workTime == times, ], aes(x = dteday, y = cnt)) +
geom_line() +
ylab("Numero de Bikes") +
labs(title = paste("Demanda de Bikes as ", as.character(times), ":00", sep = "")) +
theme(text = element_text(size = 20))
}
lapply(times, tms.plot)
tms.plot <- function(times){
ggplot(bikes[bikes$workTime == times, ], aes(x = dteday, y = cnt, group = 1)) +
geom_line() +
ylab("Numero de Bikes") +
labs(title = paste("Demanda de Bikes as ", as.character(times), ":00", sep = "")) +
theme(text = element_text(size = 20))
}
lapply(times, tms.plot)
lapply(times, tms.plot)
lapply(times, tms.plot)
View(bikes)
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
## Importância da Análise Exploratória
# - É muito importante analisarmos uma detalhada Análise Exploratória para o melhor entendimento dos dados.
#   Ou seja, precisamos olhar nossos dados por diversos ângulos.
# - Iremos realizar 3 atividades de Análise Exploratória: Séries Temporais, Boxplots e Density Plots
# - Dentro destas 3 atividades não iremos fazer nenhuma alteração no dados, o objetivo é a melhor compreensão dos dados.
## Séries Temporais
# - Nossa primeira atividade de Análise Exploratória será uma Análise de Séries Temporais.
# - Será uma análise simples pois é um tema muito extenso.
#   -> Quando trabalhar com Séries Temporais ?
# - Quando nossos dados estiverem distribuídos com períodos de datas (minutos, horas, dias semana, ano, etc).
#   Quando os dados não trabalham ou não precisam de datas, nós não trabalhamos com séries temporais.
# - No caso do nosso Projeto Demanda por Aluguéis de Bikes, nós temos o aluguel ao longo de períodos de datas.
#   Temos bikes alugadas por período de 1 hora, 1 dia ou 1 semana e etc.
# - Portanto, faz sentido realizarmos uma Análise de Séries Temporais para compreendermos se temos algo fora dos limites,
#   algo fora de padrão ou um padrão não detectado.
# Variável que controla a execução do script
Azure <- FALSE
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
}
Azure <- FALSE
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
print(".")
}
# Criando um vetor com algumas horas do dia para verificar qual horário tem a maior demanda por aluguel de bikes
# (pode ser feito com outros valores)
times <- c(7, 9, 12, 15, 18, 20, 22)
tms.plot <- function(times){
ggplot(bikes[bikes$workTime == times, ], aes(x = dteday, y = cnt, group = 1)) +
geom_line() +
ylab("Numero de Bikes") +
labs(title = paste("Demanda de Bikes as ", as.character(times), ":00", sep = "")) +
theme(text = element_text(size = 20))
}
lapply(times, tms.plot)
View(bikes)
Azure <- FALSE
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
# Transformar o objeto de data
bikes$dteday <- char.toPOSIXct(bikes)
# Na linha de cima foi gerado dois valores NA
# Esta linha abaixo corrige
bikes <- na.omit(bikes)
}
Azure <- FALSE
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
source("src/Tools.R")
# Transformar o objeto de data
bikes$dteday <- char.toPOSIXct(bikes)
# Na linha de cima foi gerado dois valores NA
# Esta linha abaixo corrige
bikes <- na.omit(bikes)
}
View(bikes)
bikes2 <- read.csv("datasets/bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
View(bikes)
View(bikes2)
# Execução de acordo com o valor da variável Azure
if(Azure){
source("src/Tools.R")
bikes <- maml.mapInputPort(1)
bikes$dteday <- set.asPOSIXct(bikes)
}else{
source("src/Tools.R")
bikes <- read.csv("datasets/bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
# Selecionar as variáveis que serão usadas
cols <- c("dteday", "mnth", "hr", "holiday",
"workingday", "weathersit", "temp",
"hum", "windspeed", "cnt")
# Criando um subset dos dados
bikes <- bikes[, cols]
# Transformar o objeto de data
bikes$dteday <- char.toPOSIXct(bikes)
# Na linha de cima foi gerado dois valores NA
# Esta linha abaixo corrige
bikes <- na.omit(bikes)
# Normalizar as variaveis preditoras numericas
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
}
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
# Adicionar uma coluna com a quantidade de meses, o que vai ajudar a criar o modelo
bikes <- month.count(bikes)
# Criar um fator ordenado para o dia da semana, comecando por segunda-feira
# Neste fator eh convertido para ordenado numérico para ser compativel com os tipos de dados do Azure ML
bikes$dayWeek <- as.factor(weekdays(bikes$dteday))
# Bloco1
# Se o seu sistema operacional estiver em portugês, execute o comando abaixo.
bikes$dayWeek <- as.numeric(ordered(bikes$dayWeek,
levels = c("segunda",
"terça",
"quarta",
"quinta",
"sexta",
"sábado",
"domingo")))
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
# Transforma os valores de hora na madrugada, quando a demanda por bibicletas é praticamente nula
bikes$xformHr <- ifelse(bikes$hr > 4, bikes$hr - 5, bikes$hr + 19)
# Adiciona uma variável com valores únicos para o horário do dia para dias de semana e dias de fim de semana
# Considerando horas da madrugada
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
View(bikes)
write_csv(bikes, 'bikes.csv')
bikes3 <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
View(bikes3)
# Salvando arquivo CSV
library(readr)
# Salvando o dataset com o formato original da coluna dteday
write_csv(bikes, 'bikes.csv', col_types = cols(dteday = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
# Salvar o dataset com formato original da coluna dteday
write.csv(bikes, 'bikes.csv', row.names = FALSE, quote = TRUE)
bikes3 <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
install.packages("writexl", dependencies = TRUE)
library(writexl)
# Salvar o dataset com formato original da coluna dteday
write_xlsx(bikes, 'bikes.xlsx', col_types = c('datetime'))
install.packages("openxlsx", dependencies = TRUE)
library(openxlsx)
# Salvar o dataset com formato original da coluna dteday
write.xlsx(bikes, 'bikes.xlsx', row.names = FALSE)
# Salvar o dataset com formato original da coluna dteday
write.xlsx(bikes, 'bikes.xlsx', rowNames = FALSE)
bikes3 <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
bikes3 <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
View(bikes3)
# Variável que controla a execução do script
# (Se o valor for FALSE, o codigo sera executado no RStudio)
Azure <- FALSE
# Execução de acordo com o valor da variável Azure
if(Azure){
source("src/Tools.R")
bikes <- maml.mapInputPort(1)
bikes$dteday <- set.asPOSIXct(bikes)
}else{
source("src/Tools.R")
bikes <- read.csv("datasets/bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
# Selecionar as variáveis que serão usadas
cols <- c("dteday", "mnth", "hr", "holiday",
"workingday", "weathersit", "temp",
"hum", "windspeed", "cnt")
# Criando um subset dos dados
bikes <- bikes[, cols]
# Transformar o objeto de data
# bikes$dteday <- char.toPOSIXct(bikes)
# Na linha de cima foi gerado dois valores NA
# Esta linha abaixo corrige
bikes <- na.omit(bikes)
# Normalizar as variaveis preditoras numericas
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
}
View(bikes)
View(bikes)
# Criar uma nova variável para indicar dia da semana (workday)
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
# Adicionar uma coluna com a quantidade de meses, o que vai ajudar a criar o modelo
bikes <- month.count(bikes)
# Criar um fator ordenado para o dia da semana, comecando por segunda-feira
# Neste fator eh convertido para ordenado numérico para ser compativel com os tipos de dados do Azure ML
bikes$dayWeek <- as.factor(weekdays(bikes$dteday))
bikes$dteday2 <- bikes$teday
View(bikes)
View(bikes)
# Adicionar uma coluna com a quantidade de meses, o que vai ajudar a criar o modelo
bikes <- month.count(bikes)
View(bikes)
bikes$dteday2 <- bikes$teday
bikes$dteday2 <- bikes$dteday
source("src/Tools.R")
bikes$dteday2 <- char.toPOSIXct(bikes)
View(bikes)
# Criar um fator ordenado para o dia da semana, comecando por segunda-feira
# Neste fator eh convertido para ordenado numérico para ser compativel com os tipos de dados do Azure ML
bikes$dayWeek <- as.factor(weekdays(bikes$dteday2))
bikes <- subset(bikes, select = -c(dteday2))
View(bikes)
bikes$dayWeek <- as.numeric(ordered(bikes$dayWeek,
levels = c("segunda",
"terça",
"quarta",
"quinta",
"sexta",
"sábado",
"domingo")))
View(bikes)
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
# Transforma os valores de hora na madrugada, quando a demanda por bibicletas é praticamente nula
bikes$xformHr <- ifelse(bikes$hr > 4, bikes$hr - 5, bikes$hr + 19)
# Adiciona uma variável com valores únicos para o horário do dia para dias de semana e dias de fim de semana
# Considerando horas da madrugada
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
# Salvar o dataset com formato original da coluna dteday
write.xlsx(bikes, 'bikes.xlsx', rowNames = FALSE)
bikes3 <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
View(bikes3)
Azure <- FALSE
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
source("src/Tools.R")
Bikes3$dteday <- set.asPOSIXct(Bikes)
}
Azure <- FALSE
if(Azure){
source("src/Tools.R")
Bikes <- maml.mapInputPort(1)
Bikes$dteday <- set.asPOSIXct(Bikes)
}else{
source("src/Tools.R")
Bikes3$dteday <- set.asPOSIXct(bikes3)
}
View(bikes3)
# Variável que controla a execução do script
# (Se o valor for FALSE, o codigo sera executado no RStudio)
Azure <- FALSE
# Execução de acordo com o valor da variável Azure
if(Azure){
source("src/Tools.R")
bikes <- maml.mapInputPort(1)
bikes$dteday <- set.asPOSIXct(bikes)
}else{
source("src/Tools.R")
bikes <- read.csv("datasets/bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
# Selecionar as variáveis que serão usadas
cols <- c("dteday", "mnth", "hr", "holiday",
"workingday", "weathersit", "temp",
"hum", "windspeed", "cnt")
# Criando um subset dos dados
bikes <- bikes[, cols]
# Transformar o objeto de data
#bikes$dteday <- char.toPOSIXct(bikes)
# Na linha de cima foi gerado dois valores NA
# Esta linha abaixo corrige
bikes <- na.omit(bikes)
# Normalizar as variaveis preditoras numericas
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
}
View(bikes)
bikes$dteday2 <- bikes$dteday
source("src/Tools.R")
bikes$dteday2 <- char.toPOSIXct(bikes)
View(bikes)
# Criar um fator ordenado para o dia da semana, comecando por segunda-feira
# Neste fator eh convertido para ordenado numérico para ser compativel com os tipos de dados do Azure ML
bikes$dayWeek <- as.factor(weekdays(bikes$dteday2))
bikes <- subset(bikes, select = -c(dteday2))
# Bloco1
# Se o seu sistema operacional estiver em portugês, execute o comando abaixo.
bikes$dayWeek <- as.numeric(ordered(bikes$dayWeek,
levels = c("segunda",
"terça",
"quarta",
"quinta",
"sexta",
"sábado",
"domingo")))
# Adiciona uma variável com valores únicos para o horário do dia em dias de semana e dias de fim de semana
# Com isso diferenciamos as horas dos dias de semana, das horas em dias de fim de semana
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
# Adiciona uma variável com valores únicos para o horário do dia em dias de semana e dias de fim de semana
# Com isso diferenciamos as horas dos dias de semana, das horas em dias de fim de semana
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
